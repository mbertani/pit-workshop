input{
  beats{port=>5001}
}

filter{
    mutate{
      id => "mutate_clean"
      rename => {"json" => "person"}
      gsub => [
        "[person][timestamp]","T"," ",
        "[person][balance]","\$","",
        "[person][balance]","\,",""
        ]
     # convert => {"[person][balance]" => "float"}
   }

    date{
      id => "date_parsing"
      match => ["[person][timestamp]","yyyy-MM-dd HH:mm:ss ZZ"]
      remove_field => ["[person][timestamp]","beat"]
    }

    dissect{
      id => "dissect_address"
      mapping => {
        "[person][address]" =>"%{[person][street]}, %{+[person][street]}, %{[person][city]}, %{[person][zip]}"
      }
    }

    ruby { # Extract day of week and time of day of @timestamp
      id => "ruby_timestamp"
      code => "
         if event.get('[@timestamp]')
         eventdate = DateTime.strptime(event.get('[@timestamp]').to_s,'%Y-%m-%dT%H:%M:%S.%L%Z')
         event.set('[@metadata][timestamp_dayOfWeek]', eventdate.strftime('%A') )
         event.set('[@metadata][timestamp_monthOfYear]', eventdate.strftime('%B') ) # day of the month full name
         event.set('[@metadata][timestamp_dayOfMonth]', eventdate.strftime('%-d') ) # day of the month, no padded
         event.set('[@metadata][timestamp_hourOfDay]', eventdate.strftime('%H') )       # 00,01,...,23
         event.set('[@metadata][timestamp_minuteOfHour]', eventdate.strftime('%M') )    # 00,01,...,59
         event.set('[@metadata][timestamp_weekNumber]', eventdate.strftime('%W') ) # week starting mondays
         event.set('[@metadata][timestamp_dayOfYear]', eventdate.strftime('%j') )  # 001,...,366
         event.set('[@metadata][timestamp_datoParsed]', eventdate.to_s )  # for verifisering
         end
         "
      add_field => {
         "[timestamp][dayOfWeek]" => "%{[@metadata][timestamp_dayOfWeek]}"
         "[timestamp][hourOfDay]" => "%{[@metadata][timestamp_hourOfDay]}"
         "[timestamp][minuteOfHour]" => "%{[@metadata][timestamp_minuteOfHour]}"
         "[timestamp][monthOfYear]" => "%{[@metadata][timestamp_monthOfYear]}"
         "[timestamp][dayOfMonth]" => "%{[@metadata][timestamp_dayOfMonth]}"
         "[timestamp][weekNumber]" => "%{[@metadata][timestamp_weekNumber]}"
         "[timestamp][dayOfYear]" => "%{[@metadata][timestamp_dayOfYear]}"
      }
    }

}

output{
  
  if (("_dateparsefailure" not in [tags]) and ("_rubyexception" not in [tags]) and ("_dissectfailure" not in [tags])){
          elasticsearch {
            hosts => ["${LOCALIP}:9200"]
            document_id => "%{[person][_id]}"
            index => "%{person}-%{pit_codec}-%{+YYYY.MM}"
          }

        #stdout {codec => rubydebug {metadata => true}}
   } else {
       file {
        path => "/home/vagrant/pit-workshop/logstash/parse.failure.log"
       }

       stdout {codec => rubydebug {metadata => true}}
   }

}
